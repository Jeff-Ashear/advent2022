let input = `FqdWDFppHWhmwwzdjvjTRTznjdMv
ZBJrDVfQcfSRMLjZnjjM
cBffPfbrbQcgQJggfVQJBPbCwlPtWFDWHFHhpmmGlGmlqmDG
PNbMLgmPgRDgRtMPDdmdbmdmQrTBVCZnVnpCnNHHVZBNVZHc
ljvvqhlvshhnrcpBZqpTcr
zGhWzFTJvsFttddWbMRdmP
hhGdDhfdDhmdnHwtzzRtdzbzQQQg
WTTZJLsvLRJCcWJWScWWLtzjwBzBttbBzSwVQjQBtt
vLJcLLTRsvsTZPqHGhFHGhhPhfqD
dJszLvzvCZZsJmszCrrdFmpppMpDMQPMgmDcDgSS
nRjRbnnjlNhblnjtVtQlWttMFPfMfPgDMpBgSBPgBS
GWVQTVTnTNhjblQNRsdJLLdTCdzdZLrdrJ
RnLJBfmJfmNBHlQvvbdQ
grhgrtqgjJhhggNHqvwWqvbNlbHw
GVTTsFFjJjVVFVGCFTJDDjhFcZmRMZfnZcncSpMSGcRPZpLp
bwSNRNSRzSWnPnJRldMBMQmMlsCcPPCP
FGpDqTTVFFprpjLVQMMGtMclcmHGtBdc
TjhhgTLpVZhpLDZqrTqZVpBSwJwzNnWNWJvzzNSggwwN
PHTMsmwrJMwLJvJddvdHwvcWnnWfccqGnhhfGcDqsnGc
tZVlzQZblBgcSqqRhRmzqf
CmlgmZlQtFtZNlVZdHLMrMvvCrrvvTTC
PrDGBBddprmzddrSqccRgSTpqbsMRR
hvLtfFNvvZNfGGfRgbqsRNlTSSgsbM
QQQjZHHQjvththFffCHPPzmGrmDzDWrWBw
GrjGrpjjCsnwhsGGPwlPTPLPVttPqLVl
HzSHHhczRlLTHqqq
DbhvFSSzQcZbcFbcQjrJrMJmmZnGJmJnjn
mvTDsJLwzlWNDDnZngZNdd
BVtPqFMqtvQFqPqjFBMVtRZGNGhfNcfQdpfgnQgNcNgp
HBHtPbHCLCzsLJvT
nVHVFfggbQVmFFfhLpBpBTrfLBCB
cjjRwJdqtwwwNNjcwRMwnLNTpNsGCnLsLGhBhpNn
tJqStcRMMMjPwlnvzgQWzmHzlmQl
nNSRcDHRmHhhDZZZdBDfWJdfrJ
LGrGVtjCPCbbQQQQLvQpbVQZzsqsBMdBqMvZMMJZqJvdBW
GCPLlLPPPbTpbCbpLPpVlmrmmrHhHcHnHrHHgTFFnm
rQbnBrDTQcdpHttt
qNsNpfjLpNLRNqLMtdVsddcmVzdzVh
WJfLCfvpWpNLbwwwBwbZFvlZ
ZslGPhBWBJbNjmbTmSWN
qtDCZcfZtDjbjCQvmmSj
ttpRzqtqRLDzpRtDdtPlhhZZGBHGPsGZPhwd
WjtcNnMtztGFrsNjcgRHvdwHhhjRwlhwlg
pPSpPBPVqJqBCCPvZdHlVGddwdhvgH
qpDBpBqPTDLqGLmpTPqbDmWMNrFrrFQnFMNnMNQtMm
dNwfsjFLQLFNBhTCTPPTBJhhTP
VmVMgqgRVHtztmgqgzgqRzgMPWCRWTpPCCPWPThDdZPCRZJp
VMqtMgGHmgVMvmqMMtGMSmbslnQFcsndfjNNsnfscnbddF
qbWcqrFNCJGSChvLGv
MnslRSpSVsGgGhDDwLvl
RjMtfnpmmmjSWSbjrNPN
rsCsqTVgfCnQFdCznQ
ZRsBvMvmZMGQQmFnDmQzzQ
MlGLlBjRGjjWWGRGMlNrLLrssTPNfLcTgrVr
vpSBBcJnWnSmcqmcChdcgf
NRNPFDwwDbThqTJffZQHhd
DzPDNVNbLwPzMLRbNMDjBlvpWjrvrVJjjSsBjr
dndGpnWdVnBPFFHTBgGH
qCcCmjqNNJDtcJQjqJqMCQJcFTBRZRwBZBHDPRHBHZDbgBBR
szJcCtNQqjqCNjjNhdgWfLLdhVWsSVnr
NjJLgSLGGCLWvqNqNBvwFb
htmVmtHnlZmDVhtmhblmDMHddBRvwwZQQqWPFvFwdvRWdR
HnlnHfDsbSTbJzsz
JvZfsPsPhRfZZnCdtnmjHVRLCH
TzcczTtgqpgGSTlHHVHCGjCdHdnQQQ
wDBDSDlWzwwzDqqMtrMrfsfbNvJNJB
ThfQTdQzQbgdhdNbJFJSlbBLlmqqHBSHCRHsHm
rWBWWPcvpGGwjPPpvpPGplRSnLLnCrLRsRlLsLmLmR
cGWPPMtpZDwpMpJQBQQQDBBVNfdQ
WcWDRLSzFrRFFccPmnssMrGtmMnnGm
jvvgCCTvNqTtJqsnqwPBmspZMB
gbVgbvlChJVbCdbtTgjdLWSHWcHSDcQzFzRzDF
zTrHgrFWRrWvMpPNBVZZHVfN
hdnlltGLtGSQPVLSNBQN
CqGGtGwlhlGdtGmbtjtmmvDRFvVFTTRDRbRgFJRbDr
DTFpQFrZDFBDFrTNFjSWJsWlWjsRJcslsp
zzPqvdqNzvqzfzMfzqmCzzfJsclWjSSRWglgjclWSmcjlJ
hfPGwhhvMGCVCdddhQQZQnNrTDQnFrtn
DDMFjwVTgVmMWgVpdqtlJnpvHHnslw
fFfZzLSfzBfZBZtqJJHsnSsldlld
GLcNhRGLZBhmDWTjDTWF
FbVcQRVRBFfNFfccVfZcWddnGrrHncWtdHsZ
hwGwjgTSGrssZHHTdn
LvPvCJgJLwjlSJmSPLvvgGfFBpBVfLLMBQMRRbzMVb
rfMCJPBMMCrSCSBGZZqRlRLzqhqh
LDvdNmbgHjHgnmnvnHjgDjqlZhZzszhqzWsRWRRNcRNZ
dmbvHDdnjDjVmjTmHjJVrfprPCCVtLSMrSpJ
fdfTBfNVZffMmdfdhGhcJLJrvnlJvrBJ
FFWFWTzWSWtFgPHgRPWTzggpJcvvSCGSGJnrvhhrrJhlGlGn
pztFjzRTqWzgHqHWtPtPFgmsNfqbDdwDNVwbmfwbdNsb
zCHvDWwvCwgpNRCWWHttCwvNPVTqrRrVbbsnbqQPbVsbPrqG
jBBcmZBGmBSSJdmhBVbnnQrVbVqqVPbhbP
ZfJBmLjfJZMcdZmJffGMtHtwNCvWwwwztMzg
rgFgllfdpFlTHfTnfnNPNtPBBVtpzmVVPmmP
bLSSbGhGWSWmLzztcQPCQC
jvwhhwRwbwshjGhWwsRRTFflFJFzfddFrHzTrJ
GSwgSdwfvdfvwgGwBLdJbjjpmFjSTRpqHmRrjptrqt
NDMVMCsWQVCsQFjFTHjVLqjFrp
PzWDDCNNlCWfbhZZLfBGwl
clFLFpFJcVmmWWgWWcWTdwZqCZCZqDqDDSwvwrdHCZ
GGLfGtbfMNbbLGtzjBNnsMjjZCwDvQZHrHQvDHHHHHHrrNHq
BthbnfPGMstmJgRPpFRTLL
VRcdVRPTgVTLVMwmggJBwblJFlmb
CqDDQsjCCrnnnQQtDcrnGCssJZNvZbvNQmZwmZlbNbwFNwmF
pstjcqrprsHrfDpnrCnHCzRhSMhMMMRVPLMhddfhzT
QNDQThccDghdcLLgVsrVLVlMGM
BbbWpppFFpnfnFbBBPRMTJMRsGlJGlJVLf
wpnbmvbnSwSnmzHHzwwhQqTctNCcqdNqZvhQjj
lwCLwLjzLhLHCvwjGCZJbQSHdBQdDdbDtdSQ
pnzcTVsszpncgFdJpbtDBDttDSJS
zTPcRrfzgzCCvGRhLLqW
BgDbztvdDzLZZwMbDDcFHQQJPLWWPJQJHTHF
jfpNqSrpCqNfNSpjCqSqshNFRQJcJWRRFssgWRHWWFWHQJ
mrnNNgNfMZwmDtZw
ZrrFPQsQPRLcvPJvhg
HpmTjnBmDDDwqtVcHNvJhNVRhgvh
tTpTGfnttqwnqQJzFdzfSdzSzr
qVVZqfVNdnBZMNzNnPzfMqbzJvFSjSllvjBwrvrvFrlsrjJs
LhHtDTmWmWmGDhGLWHghHLCwrwRjjsPJrSjFjFrFClvrww
mDDgtcLcmtTWTTHhpWLDHhDNMqVnqfdqbZdQpqVbzZVPVb
WGpVMtGZplgHVWMtZpZFHJjndvFdjddJhnjLHF
DTrRcSSccfzcCPDCTnvJvjbrrhjNvqjqJL
zczwPDTmfZZtgLwWlp
sTtTpvMjpBdmTlhlBTdvsvdncmVcVVVVHzFqVnFfqzHzWV
GGwQRZNCRgDgsDDbSbSgfGFFrHfVHVVWrHWWcVFF
RZRPgbNSJDsTsplPLsvd
GrGNGhpnPFFBfCQCMwrVlwTC
PPWHmmSvSvdTfJvJVVfCfJ
RjWDmDdDbjcSHmRRLRRHjdDBsFFbBngBzhqbBhpqBPgFFg
TfdNjJjmShGcWvQNQqcNFN
gsRZRMqbDpsHHnZnngMZFPlzQRPWvRtPwtRWzlPv
brgMMgZCLsDpHGGjfGJVSCqddT
BdSRjHScGMVjGdcScwLgqQqphNqNDqBBQW
zzQClvtttrwqrwgCwp
PQJTzvJJTtJQlvQftmfdmdmGRcSdcMSGdS
PjPwvwlfGlGCGwppWBsWQVVQnpCQ
FRSHzMJdrfRnpmpWmp
TzJTMNNrHLJfTJccvjqwwgGLZLLc
dCpjsGvcsLvszTrRRlRrDJ
hPNqqpbhFlrDnPrRnz
SBbphFNtLvvSfLfc
zTFnnZzqrjFVnZTrtwMDptbpMwMMBDzb
JGPCjWGgJjPWGJjNchmbBRpNNDsRsNBbbRBppD
JWCggWSCmhCmvWHTQrTQfHjdVlQZll
WWbrmZjbmjpbWSmcWHSbLddwvDggLFDhFrRlFFDw
qPMVzTPQVfzvVzBQTMtRswwlDdhDghhsfLwdhs
MMMPQBPJPzCVzvzQVtBJJMzCbmSZNWbSccHHmmZpWSZGZS
BgmMgjlBMjHPssBnwphtFwhSVVmGGwFS
rfCqQQrfvCQNRqCnCthFVSGSGtVS
TrzLNvWfQvrWQZNWsnHsssBBcZBMsDdZ
CtJCddDHDDPGHCdNVLPBdLDbbGFbwZSsSSZrfFFrGbGlsb
gvjpnvhRphjmpmSfsTSnPZZrZfrZ
ghRRRhQgWvmPWtHHtLdMtH
qNgQgNgNQFVbqVQDMRZMDRBHHJHRFh
jnTTPzWZCzrWzGRHMrhmBvJBSBBM
jtCGWnCWPTsTzlctWPtqLbwqZggNwgLbwdVq
DJgJDgFqCGlhFDGDCWhqCwRfpbcpbsgsVscRpwbwws
SmLZQmMVvLbsbssNQsQN
tHZMLZZZMVtmnMHWDHjWlGhFDqCl
PZRmjlDBWRBWBQMdQQBDPRhfzSSTTnfFnfzFpVFjfSVFgS
wwHCHLtLwnzNHVTZZV
rJLtZtLZcCrvJwcbrGLvrcDQDhPldhGdmmPRQhhRBlPM
zShzVhbqlbpbRNRscBNwCc
DfmFWnfmnMFDdngdngvJFHgQQNwNsHHCQCwNTTzRcN
FFFZMWWZZJMmJJMFFpztlPtSllLVphttGZ
gWhGwmwQGhVwGzBMnDFmdmDDLbCnLn
tRRHNHHlPHPfPltllNNNRsVPFrTrTbrMMTTDMdLFCrFdPP
HvRvvHNpNvfqSshwqwVQZWhggwhw
jDDRDVqNsRMMVFjFbtzpBlpllCBlhSLHSStH
JJWZZTwWcmZCzQShHhzhhm
wTrgvTwccvdcfvJvWJrvJTNzNMfGNNGjFRsjNDbfVzDs
cVWPPThWctcFRdQpzLTzBL
NNCqwNSrsDqNSSgLgffDCNpBdRvvdpmHRQvBdBqvdzBB
CgbffsDJsSsNgbgJrlcGhGtjnWcJPncjWL
RwwTGRjGlwWNgjgfQVNmjj
HJPdLhLzhbtbdLPLbHHJLdcfBffBgrFQVZgzvgBfvrvvmr
cmchnhtPqLSJJbdPLntlsDGCTWWDsDRwWWWTwS
DDDBsPGPbwhDcDcj
rgfNgCmHMvrrttvtfmNLgrLcQQJTJhcnjTQHcZlwlQHnwj
wgfLmgFgWdBFzSVR
RwsbssJjnbJwwsGPPdDLfTDLLLWvWNDGDpWD
zVtHqzHHVcBQTdpSgvQDSpTS
HHhFCdrrHchmrhcmwsjZwRwMJlshJJJZ
BdQgtJMLBqshLfNhbccfFhffNc
DnVWvvpvWvzrpwRWDbTvbTjTFGlfFSfNSFHGmFGNFmnPlmFS
wDRDZzVWVjrRVjzrQgQdbgCZLCsCQtbd
jQSgWjQmFFvHmjHWVVpZbGlbGlfGpbfGGWpf
zBPtTqzPBcdwrzPJwqCztTNvCGpbGfDnfhZpNGGZGZbG
MTzPtcrcwzTttdBJwPvFVHjMLFHQMgsSLHvs
BHtjmmTtmDtHZjMMdNzCzCWcWZsZdsZs
JRRJVPLwQJrVMPJLVVwChpRRhcdzcNzhzChNdW
SrFwfGwGSnnGPlBMDtjbllggBn
rsMDTrgsBNBgMgDBhfhDghrtcRWJttcmGRWLGQQLJRrqRL
lnVVjvPbwpndvVwlVCjVwtLcsmLLqWWtttlsmGGcmm
SsjVSCZbgTBTfNZH
wlddvlldlBzqSmStdqmmngwgDCgrpMpgCngrMCfn
jVLTHGRHjjvPGcDrfNMbnpngVbpf
RJRTTRZJLRJQZcGGHLhHvTdmBFWFtWzqdWWQlFzqBFWt
HDgZHpZSDpBQdRpHHRsDBNNzTvfTQqcqNNTqTqPQvl
rnMFFMFJwmNgvmfTzcfq
CWMtjCWMCCLWrWVWJwBbpgtRZSHbddZHBDDb
hjLWPZJpZptwJghSfgHTMTgRMR
lCcrblcnlzqDsvbfffTRSMnffjHTgj
sqscDcblGDDpWPwFGwjLLp
plQtRqRlGpPPPLZtmtpttRtJjHJvddLTHrLHJJjbdHvrrN
gcMgTBWBCTczjnvNznnbgH
FBhSwsWFWDhQZQqTTZllsT
WsVttWDbvbtRjDVtDbDbJjrjFpCCcBrSCwrrjwww
nzHqGNMfHqMMwJLLsNBrNcBS
qgnHflgzHlqlZzhnzssfzbZtmVvmTQvQdTtbbDbTvv
RtQCBbJDFhJtQtZtCbMnVnPVfGPpJVJWWmwJPG
NsczRsrdrNrjlcSTGGnwmGmnmVPWwmVT
SHcljRHzNHHjSHcrgNslcczgZtDgMDBCvQQbhDBCbFBCFCCF
dRTFRJTRTgJzSSJmzJfN
jLbQllLvvvrQlLQBrvQmFBGzCFtPSMmSGCtPPF
QjsvDvqlvrQQvnsLjDWghTwZWcccFdRVpc
bWnDbMJMFbhZSfngpfpd
HjcrlvjRjrjlLqTqpwQgpfSQgghZgvgf
THNTjClLHDCCpWmbtC
NpBNsnFMLBcPMZccbQGblWRgGZmbRWdW
CqrJTHCvDfrfwwJHRBvRGvgQmvmlWtlR
rHzJJJDDwJCqjHTwBLccMpFhshnSSsMz
bqVqqrDMpLFbLpJJQDMjbpZndwsvwHHswvnvnnZslG
hgfRghhBWgfzBgZvncvcGvWrnZsG
fTSSSBtTzhPththRrrCBzVLqMMJQjVJJCLjFjjqjJq
pQlCJQjVvVGGnjNqFbFP
wTqtmSmTBhstmstTmWRSdLdfPdNGnhGhdPNnNnrN
mzTZBwWTcSTsTmZRRmzTsVMMVMQMDJgVqqMgcJlVDl
vVwCqdCDvMrlDJCqrDMrPdTFWwZNbRcbmZWQbRQZWZcQWm
fGSfhfjHGBlhSpRmpZFZNbQWjj
ntGlgSSGgStVqdMCDCJnqd
TlTRCrhCpmnCRtMRRWbvMBfwBB
DVdQcsccdczbtQBWvmQBBW
PgHPNcmcqqTphlHTCGrT
GVLCBmdLVtlrmqGCqrTCGnjGSfwzNfPzfNNGzSSw
rMDcWMJsDWRvRcsZPwpJpSzjwwfFjfjJ
hcsscQQsDcWbHbmLgTbVgTmlrbgq
VwJndPThQQjdvbrb
BHlzFFjlZGBBlZBDFSmllfGggLNbNvggtCgNrLQLbfvbfg
SHSHHlZSGZSDHGzHssGmnjhjphJPPpPwnsJRwPMM
QFFGpfGtwgtjwvpwpGGjjBHgqzNNllHRlRllNdBRJl
SWVDWVrDhnWhnqVnWPrhcSldBJPsRMMdPHsRdJHRMMBP
SWZZcmnnZnSCLZDZftFFCvbfTTqTCTQF
TvZBTFZpshPggBNN
bbctWQDjcnwtwDDDllQzLfgsPzqgrsTPLshWfP
bwRbQRnmDwtbTjmwRJQRQVZHpCpHVdvpMHZZMHZJvd
CfqzMCGvGqNrCFFNwcMBbnnbbtBbDStw
sJjsTjvVjLVlLLbtHSnSSwQsDBSH
dJlvLVgJTRVPWWjjggCzhNGzzGZdhqrdmqrq
zGSHWGjzpRsWVfsNwZ
BmPCLzPlJBBvQmLFQrwwrVtfqtqZtsvwfR
hLLzlmmBPFFLJMlmgDTMgdSGbDgGHbSp
ppngVjZwNZwwVJjjnnVVJJJpLrsgmsmrbctsLcLmscDggDsL
vHvRzRPvQPPRqPTlffRTrssbtqmmtbcMcNrDrrtD
CHWdWzWQzdChNVZjZZwB
LjVFhwjbFggMdVggTVMNRWRGWqQWtRNWGlQW
DCzCpJppzJJDScFBzvBGnRWGWrNRQNNWGtNGqB
vFJSzDSszzzccSZHzDDJmvSJhVwLjfVTPZLfwLgjThLZwhVh
FMSSNScRlSGzfqWbqqcpWBhpmW
TrPrnQNnJwtQpmmpmbbL
vwvCsJZZnnwVnVHsfNjDRgSjRzgRjZjN
CRhsghlqlvjhPslQdrMndMTWdPnTMJ
tcDNFDpDSDwDtHrSDwDtFmtpJzWTnzQJpzQGnGWQMWnnTGBd
ZfFSmSfwcwcScZHtVRhRCqLqCfrVrrfg
vHPsBzvRvhCzbwbnjHLVmVbW
ggdlpZNdZdflWTGpVMjgVbqjVmngnVbr
lNpfllFGpZTtclDZzSWQFCWWzChPzQhS
ddbJQGsgJcQccCjjTC
DDflHqNNNjCCPNbT
LFpLzfzqHzLbLvtndJhs
mHtbGdwzmtHZrtrHtHGwrmtcFgBFRsBFcdglRsfsdgJBNN
WvpSVjCCTCSPVDqTVjLqJwWRcWsNlgBcBlfWBRfl
qDwjvqjVTDDLSPpnjqVnzbhbZbrGMmHzbMHHhh
cMrrVsdtCdVtwqdHgLjPLFLfcfZZJB
zGSlGGvpDWWvbSSNTggZPPTTJLZPjPzJ
bNQDWbjlGSGNnWGblbQDQCmdqhsMtrsVnCrtnwdnCt
WZSnCCMMdMMMSJMSVZmmFqVjqjVwVjjc
zvzTlQQQQTNGbmQTjqBjcwwwGgBHGwqB
mthbtmlPhTrNzNhhPLzlPzWfWPJdRCWspPWSSRsWSnJp
nmqsjNFqNLcVlPNvRdvPPv
MrggHrMpbtTpgpDptlQRJJldVRPBsDQvvV
grgrTzfTGSFGsGSCLc
hjdjCfQCLdQcWMfDDQhLsLCjqvVqzzZZprBFbzVdvVnqnBbd
NTglmJGJRnRZVrVvFr
gPGgPJSTPJtHncnjWDhDMDhP
ZWWqBqqmgFFDMTTWDMwwcW
ddGPpJQPprRSCrQzJPJGjHDvssMTDZDwcHhMsHsMHS
zNRGrCRRCjPpdGQJNglqntnbtgNBZtFqtt
pslQSspQrqHfgMRl
tJBTjsTLGMBGMFMg
tDwnhZdnLdZDwczzcPvsVvVW
nZnMSDnGtnzmzWZZcMmgMcHwFFVHhHwbHsVrwQhVhF
dlTqNqfTjdJflCppCQQRHVwFRJrvJsFVQs
LNTqBLPprpLLzWtSnMZBMDGm
PBjlPvvcJlJzwqjnnjLnwm
dMfdpVfVhGVfVpVTtWWbzwngLMLwMRCmgmLMmsww
SWppdTrprThhrGVztcrllrQJZNlBZlrNZB
TTrNcjGNWDdDPDpPjDPNrbmFPfQSFmfSMCmCfSmSSR
sshhqshzBVnzHgwCMbCwcfmRFmRMbm
gHVVnBzJcBgVhtZZtgJhpGrGNpvDpddvprNGrlTJ
`

// function needs to:
// separate input into individual strings
// measure the length of each string and divide it into equal halves
// scan each half for recurring characters
// assign each recurring character a priority value
// incriment the sum of all priority values

function priorities(str) {
    let arr = str.split(`\n`)
    let compartment1 = ""
    let compartment2 = ""
    let recurringItem = ""
    let priorityValue = 0
    let sum = 0


    for (let i = 0; i < arr.length; ++i) {
        compartment1 = arr[i].slice(0, arr[i].length / 2)
        compartment2 = arr[i].slice(arr[i].length / 2, arr[i].length)

        for (let i = 0; i < compartment1.length; ++i) {
            for (let j = 0; j < compartment2.length; ++j) {
                if (compartment1[i] === compartment2[j]) {
                    recurringItem = compartment1[i]
                    console.log(recurringItem, compartment2[j])
                }

            }
        }
    }


}


console.log(priorities(input))